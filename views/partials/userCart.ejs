<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<link rel="stylesheet" href="/stylesheets/cart.css">

<div class="cart-container">
    <div class="cart-header">
        <h1>Your Shopping Cart</h1>
    </div>

    <% if (cart.items.length===0) { %>
        <div class="empty-cart">
            <p>Your cart is empty. Add some products!</p>
            <a href="/user/productList" class="btn btn-primary">Continue Shopping</a>
        </div>
        <% } else { %>
            <div class="cart-items">
                <% let total=0; %>
                    <% cart.items.forEach(item=> {
                        const price = item.productId.price;
                        const quantity = item.quantity;
                        const itemTotal = price * quantity;
                        total += itemTotal;
                        %>
                        <div class="cart-item" data-product-id="<%= item.productId._id %>">
                            <img src="<%= item.productId.images && item.productId.images.length > 0 ? item.productId.images[0] : '/path/to/default/image.jpg' %>"
                                alt="<%= item.productId.productName %>">

                            <div class="cart-item-details">
                                <h3>
                                    <%= item.productId.productName %>
                                </h3>
                                <% if (item.productId.offerPrice) { %>
                                    <p class="price">
                                        <span class="offer-price" data-offer-price="<%= item.productId.offerPrice %>">
                                            ₹<%= item.productId.offerPrice.toFixed(2) %>
                                        </span>
                                    </p>
                                    <% } else { %>
                                        <p class="price">
                                            <span data-original-price="<%= item.productId.price %>">
                                                ₹<%= item.productId.price.toFixed(2) %>
                                            </span>
                                        </p>
                                        <% } %>
                                            <div class="quantity-controls">
                                                <button class="quantity-btn decrease-qty">-</button>
                                                <input type="number" class="quantity-input" value="<%= quantity %>"
                                                    min="1" max="<%= item.productId.stock %>"
                                                    data-stock="<%= item.productId.stock %>" readonly>
                                                <button class="quantity-btn increase-qty">+</button>
                                                <button class="remove-item">Remove</button>
                                            </div>
                            </div>

                            <div class="item-total">
                                ₹<span class="item-total-value">
                                    <%= ((item.productId.offerPrice || item.productId.price) * item.quantity).toFixed(2)
                                        %>
                                </span>
                            </div>
                        </div>
                        <% }); %>

                            <div class="cart-summary">
                                <div class="grand-total">
                                    <span>Total</span>
                                    <span>₹<span id="grand-total">
                                            <%= cart.total.toFixed(2) %>
                                        </span></span>
                                </div>
                            </div>

            </div>

            <div class="cart-actions">
                <a href="/user/productList" class="btn btn-primary">Continue Shopping</a>
                <div>
                    <button id="clear-cart" class="btn btn-danger">Clear Cart</button>
                    <a href="/user/checkout" class="btn btn-success">Proceed to Checkout</a>
                </div>
            </div>
            <% } %>
</div>

<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<!-- Cart JavaScript -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        initializeCart();
    });

    function initializeCart() {
        initializeQuantityControls();
        initializeCartActions();
    }

    function initializeQuantityControls() {
        // Quantity increase buttons
        document.querySelectorAll('.increase-qty').forEach(button => {
            button.addEventListener('click', function () {
                const cartItem = this.closest('.cart-item');
                const quantityInput = cartItem.querySelector('.quantity-input');
                const currentQuantity = parseInt(quantityInput.value);
                const maxStock = parseInt(quantityInput.getAttribute('data-stock'));
                const productId = cartItem.getAttribute('data-product-id');

                // Set maximum allowed quantity (minimum of stock limit and 10)
                const maxAllowed = Math.min(maxStock, 10);

                if (currentQuantity < maxAllowed) {
                    quantityInput.value = currentQuantity + 1;
                    updateCartItem(productId, currentQuantity + 1);
                    updateItemAndGrandTotal(cartItem);
                } else {
                    const message = currentQuantity >= 10
                        ? 'Maximum limit of 10 items per product reached!'
                        : 'Maximum available stock limit reached!';

                    Swal.fire({
                        icon: 'warning',
                        title: 'Quantity Limit Reached',
                        text: message,
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                }
            });
        });
        // Quantity decrease buttons
        document.querySelectorAll('.decrease-qty').forEach(button => {
            button.addEventListener('click', function () {
                const cartItem = this.closest('.cart-item');
                const quantityInput = cartItem.querySelector('.quantity-input');
                const currentQuantity = parseInt(quantityInput.value);
                const productId = cartItem.getAttribute('data-product-id');

                if (currentQuantity > 1) {
                    quantityInput.value = currentQuantity - 1;
                    updateCartItem(productId, currentQuantity - 1);
                    updateItemAndGrandTotal(cartItem);
                }
            });
        });


        document.querySelectorAll('.quantity-input').forEach(input => {
            input.addEventListener('change', function () {
                const cartItem = this.closest('.cart-item');
                const maxStock = parseInt(this.getAttribute('data-stock'));
                const productId = cartItem.getAttribute('data-product-id');
                let newQuantity = parseInt(this.value);

                // Set maximum allowed quantity (minimum of stock limit and 10)
                const maxAllowed = Math.min(maxStock, 10);

                if (isNaN(newQuantity) || newQuantity < 1) {
                    newQuantity = 1;
                } else if (newQuantity > maxAllowed) {
                    newQuantity = maxAllowed;
                    const message = maxAllowed === 10
                        ? 'Maximum limit of 10 items per product reached!'
                        : 'Adjusted to maximum available stock';

                    Swal.fire({
                        icon: 'warning',
                        title: 'Quantity Adjusted',
                        text: message,
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });
                }

                this.value = newQuantity;
                updateCartItem(productId, newQuantity);
                updateItemAndGrandTotal(cartItem);
            });
        });
    }
    function initializeCartActions() {
        // Remove item buttons
        document.querySelectorAll('.remove-item').forEach(button => {
            button.addEventListener('click', function () {
                const cartItem = this.closest('.cart-item');
                const productId = cartItem.getAttribute('data-product-id');
                const productName = cartItem.querySelector('h3').textContent;

                Swal.fire({
                    title: 'Remove Item',
                    text: `Are you sure you want to remove "${productName}" from your cart?`,
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, remove it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        removeCartItem(productId, cartItem);
                    }
                });
            });
        });

        // Clear cart button
        const clearCartButton = document.getElementById('clear-cart');
        if (clearCartButton) {
            clearCartButton.addEventListener('click', function () {
                Swal.fire({
                    title: 'Clear Cart',
                    text: 'Are you sure you want to clear your entire cart?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, clear it!',
                    cancelButtonText: 'Cancel',
                    heightAuto: false
                }).then((result) => {
                    if (result.isConfirmed) {
                        clearCart();
                    }
                });
            });
        }
    }

    function updateItemAndGrandTotal(cartItem) {
        const offerPriceElement = cartItem.querySelector('.offer-price');
        const originalPriceElement = cartItem.querySelector('[data-original-price]');

        // Determine the actual price to use
        let price;
        if (offerPriceElement) {
            price = parseFloat(offerPriceElement.getAttribute('data-offer-price'));
        } else if (originalPriceElement) {
            price = parseFloat(originalPriceElement.getAttribute('data-original-price'));
        }

        const quantity = parseInt(cartItem.querySelector('.quantity-input').value);
        const itemTotal = price * quantity;

        if (!isNaN(itemTotal)) {
            cartItem.querySelector('.item-total-value').textContent = itemTotal.toFixed(2);
            updateGrandTotal();
        }
    }
    function updateGrandTotal() {
        let grandTotal = 0;
        document.querySelectorAll('.cart-item').forEach(item => {
            const itemTotalValue = parseFloat(item.querySelector('.item-total-value').textContent);
            if (!isNaN(itemTotalValue)) {
                grandTotal += itemTotalValue;
            }
        });
        document.getElementById('grand-total').textContent = grandTotal.toFixed(2);
    }

    function updateCartItem(productId, quantity) {
        fetch('/user/cart/update', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId: productId,
                quantity: quantity
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById('grand-total').textContent = data.total.toFixed(2);
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Update Failed',
                        text: data.message,
                        showConfirmButton: true,
                        confirmButtonColor: '#3085d6'
                    }).then(() => {
                        location.reload();
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to update cart. Please try again.',
                    showConfirmButton: true,
                    confirmButtonColor: '#3085d6'
                });
            });
    }

    function removeCartItem(productId, cartItem) {
        fetch(`/user/cart/delete/${productId}`, {
            method: 'DELETE'
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    cartItem.remove();
                    updateGrandTotal();
                    Swal.fire({
                        icon: 'success',
                        title: 'Item Removed',
                        text: 'Item successfully removed from cart',
                        toast: true,
                        position: 'top-end',
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    });

                    if (document.querySelectorAll('.cart-item').length === 0) {
                        location.reload();
                    }
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message,
                        showConfirmButton: true,
                        confirmButtonColor: '#3085d6'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to remove item. Please try again.',
                    showConfirmButton: true,
                    confirmButtonColor: '#3085d6'
                });
            });
    }

    function clearCart() {
        fetch('/user/cart/clear', {
            method: 'DELETE'
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Cart Cleared',
                        text: 'Your cart has been cleared successfully',
                        showConfirmButton: false,
                        timer: 2000,
                        timerProgressBar: true
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message,
                        showConfirmButton: true,
                        confirmButtonColor: '#3085d6'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to clear cart. Please try again.',
                    showConfirmButton: true,
                    confirmButtonColor: '#3085d6'
                });
            });
    }
</script>